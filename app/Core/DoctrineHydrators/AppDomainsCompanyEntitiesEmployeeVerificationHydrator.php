<?php

namespace App\Core\DoctrineHydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\Query\Query;
use Doctrine\ODM\MongoDB\UnitOfWork;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadataInfo;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class AppDomainsCompanyEntitiesEmployeeVerificationHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="bin_uuid") */
        if (isset($data['_id']) || (! empty($this->class->fieldMappings['id']['nullable']) && array_key_exists('_id', $data))) {
            $value = $data['_id'];
            if ($value !== null) {
                $return = $value !== null ? ($value instanceof \MongoBinData ? $value->bin : $value) : null;
            } else {
                $return = null;
            }
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['email']) || (! empty($this->class->fieldMappings['email']['nullable']) && array_key_exists('email', $data))) {
            $value = $data['email'];
            if ($value !== null) {
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['email']->setValue($document, $return);
            $hydratedData['email'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['emailPin'])) {
            $embeddedDocument = $data['emailPin'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['emailPin'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['emailPin'], $document, 'emailPin');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            if (empty($hints[Query::HINT_READ_ONLY])) {
                $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);
            }

            $this->class->reflFields['emailPin']->setValue($document, $return);
            $hydratedData['emailPin'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['phone']) || (! empty($this->class->fieldMappings['phone']['nullable']) && array_key_exists('phone', $data))) {
            $value = $data['phone'];
            if ($value !== null) {
                $return = (string) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['phone']->setValue($document, $return);
            $hydratedData['phone'] = $return;
        }

        /** @EmbedOne */
        if (isset($data['phonePin'])) {
            $embeddedDocument = $data['phonePin'];
            $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['phonePin'], $embeddedDocument);
            $embeddedMetadata = $this->dm->getClassMetadata($className);
            $return = $embeddedMetadata->newInstance();

            $this->unitOfWork->setParentAssociation($return, $this->class->fieldMappings['phonePin'], $document, 'phonePin');

            $embeddedData = $this->dm->getHydratorFactory()->hydrate($return, $embeddedDocument, $hints);
            $embeddedId = $embeddedMetadata->identifier && isset($embeddedData[$embeddedMetadata->identifier]) ? $embeddedData[$embeddedMetadata->identifier] : null;

            if (empty($hints[Query::HINT_READ_ONLY])) {
                $this->unitOfWork->registerManaged($return, $embeddedId, $embeddedData);
            }

            $this->class->reflFields['phonePin']->setValue($document, $return);
            $hydratedData['phonePin'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['company'])) {
            $reference = $data['company'];
            if (isset($this->class->fieldMappings['company']['storeAs']) && $this->class->fieldMappings['company']['storeAs'] === ClassMetadataInfo::REFERENCE_STORE_AS_ID) {
                $className = $this->class->fieldMappings['company']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['company'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['company']->setValue($document, $return);
            $hydratedData['company'] = $return;
        }

        /** @Field(type="verificationAction") */
        if (isset($data['action']) || (! empty($this->class->fieldMappings['action']['nullable']) && array_key_exists('action', $data))) {
            $value = $data['action'];
            if ($value !== null) {
                $return = new $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['action']->setValue($document, $return);
            $hydratedData['action'] = $return;
        }

        /** @Field(type="bool") */
        if (isset($data['phoneVerified']) || (! empty($this->class->fieldMappings['phoneVerified']['nullable']) && array_key_exists('phoneVerified', $data))) {
            $value = $data['phoneVerified'];
            if ($value !== null) {
                $return = (bool) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['phoneVerified']->setValue($document, $return);
            $hydratedData['phoneVerified'] = $return;
        }

        /** @Field(type="bool") */
        if (isset($data['emailVerified']) || (! empty($this->class->fieldMappings['emailVerified']['nullable']) && array_key_exists('emailVerified', $data))) {
            $value = $data['emailVerified'];
            if ($value !== null) {
                $return = (bool) $value;
            } else {
                $return = null;
            }
            $this->class->reflFields['emailVerified']->setValue($document, $return);
            $hydratedData['emailVerified'] = $return;
        }
        return $hydratedData;
    }
}